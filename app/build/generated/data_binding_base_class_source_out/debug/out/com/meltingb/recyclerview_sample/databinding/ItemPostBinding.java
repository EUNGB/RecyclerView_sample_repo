// Generated by view binder compiler. Do not edit!
package com.meltingb.recyclerview_sample.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.meltingb.recyclerview_sample.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemPostBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CheckBox cbScrap;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final LinearLayout llPostInfo;

  @NonNull
  public final TextView tvNickname;

  @NonNull
  public final TextView tvScrap;

  @NonNull
  public final TextView tvTitle;

  @NonNull
  public final TextView tvViewCount;

  private ItemPostBinding(@NonNull ConstraintLayout rootView, @NonNull CheckBox cbScrap,
      @NonNull ImageView imageView, @NonNull LinearLayout llPostInfo, @NonNull TextView tvNickname,
      @NonNull TextView tvScrap, @NonNull TextView tvTitle, @NonNull TextView tvViewCount) {
    this.rootView = rootView;
    this.cbScrap = cbScrap;
    this.imageView = imageView;
    this.llPostInfo = llPostInfo;
    this.tvNickname = tvNickname;
    this.tvScrap = tvScrap;
    this.tvTitle = tvTitle;
    this.tvViewCount = tvViewCount;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemPostBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemPostBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_post, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemPostBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cbScrap;
      CheckBox cbScrap = rootView.findViewById(id);
      if (cbScrap == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = rootView.findViewById(id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.llPostInfo;
      LinearLayout llPostInfo = rootView.findViewById(id);
      if (llPostInfo == null) {
        break missingId;
      }

      id = R.id.tvNickname;
      TextView tvNickname = rootView.findViewById(id);
      if (tvNickname == null) {
        break missingId;
      }

      id = R.id.tvScrap;
      TextView tvScrap = rootView.findViewById(id);
      if (tvScrap == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = rootView.findViewById(id);
      if (tvTitle == null) {
        break missingId;
      }

      id = R.id.tvViewCount;
      TextView tvViewCount = rootView.findViewById(id);
      if (tvViewCount == null) {
        break missingId;
      }

      return new ItemPostBinding((ConstraintLayout) rootView, cbScrap, imageView, llPostInfo,
          tvNickname, tvScrap, tvTitle, tvViewCount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
